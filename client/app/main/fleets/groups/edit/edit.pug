.main__fleets__groups__edit
  .main__fleets__groups__edit__header
    h3 {{ $ctrl.fleet.name }} - {{ $ctrl.group.name }}
  form.row(ng-submit="$ctrl.save()", novalidate)
    .col-md-5.push-md-7.push-lg-6
      .main__fleets__groups__edit__sidebar(sticky)
        p.text-muted As well, electric vehicle charging stations can be more easily installed directly at the company to service several vehicles than at private homes for only a few vehicles.
        p
          button.btn.btn-primary.btn-lg(type="submit", ng-disabled="!$ctrl.hasChanged()")
            | Save changes
          =" "
          a.btn.btn-secondary.btn-lg(ui-sref="main.fleets")
            | Cancel
    .col-md-7.col-lg-6.pull-md-5
      .card
        .main__fleets__groups__edit__context(ng-repeat='context in $ctrl.contextes')
          h5.main__fleets__groups__edit__context__heading(sticky='', ng-click="context.open = !context.open")
            i.fa.fa-caret-down(ng-show="context.open")
            i.fa.fa-caret-up(ng-hide="context.open")
            | &nbsp;{{ context.title | translate }}
          .card-block(ng-show="context.open")
              fieldset.form-group(ng-repeat='input in context.inputs', ng-show='input.isVisible(context._values)')
                label.row
                  .col-lg-5(ng-class=":: { 'col-form-label': input.getType() !== 'boolean' && input.getType() !== 'static' }")
                    | {{ input.meta.label | translate }}
                    span(uib-tooltip-html="input.meta.description | translate", ng-show="input.meta.description")
                      i.fa.fa-info
                  .col-lg-7
                    div(ng-switch=":: input.getType()")
                      div.custom-control.custom-checkbox(ng-switch-when="boolean")
                        input.custom-control-input(type="checkbox",
                        name="{{ input.meta.name }}",
                        ng-model="$ctrl.gs(context, input.meta.name)",
                        ng-model-options="{ getterSetter: true }")
                        span.custom-control-indicator
                      div(ng-switch-when="enum", ng-class="{ 'input-group': input.meta.unit }")
                        select.form-control(
                          name="{{ input.meta.name }}",
                          ng-options="val as (val | translate) for val in $ctrl.getInputValues(input).range",
                          ng-model="$ctrl.gs(context, input.meta.name)",
                          ng-model-options="{ getterSetter: true }")
                            option(value="") ⎼⎼
                        span.input-group-addon(ng-show="input.meta.unit")
                          | {{ input.meta.unit | translate }}
                      div(ng-switch-when="interval", ng-class="{ 'input-group': input.meta.unit }")
                        input.form-control(type="number",
                          name="{{ input.meta.name }}",
                          min="{{ $ctrl.getInputValues(input).floor }}",
                          max="{{ $ctrl.getInputValues(input).ceil }}",
                          step="{{ $ctrl.getInputValues(input).step != 1 ? $ctrl.getInputValues(input).step : 'any' }}",
                          ng-model="$ctrl.gs(context, input.meta.name)",
                          ng-model-options="{ getterSetter: true }")
                        span.input-group-addon(ng-show="input.meta.unit")
                          | {{ input.meta.unit | translate }}
                      div(ng-switch-when="string")
                        input.form-control(type="text",
                          name="{{ input.meta.name }}",
                          ng-model="$ctrl.gs(context, input.meta.name)",
                          ng-model-options="{ getterSetter: true }")
                        span.input-group-addon(ng-show="input.meta.unit")
                          | {{ input.meta.unit | translate }}
                      div(ng-switch-when="color")
                        input.form-control(type="text",
                          name="{{ input.meta.name }}",
                          data-color="{{ $ctrl.gs(context, input.meta.name)() }}",
                          colorpicker="",
                          ng-model="$ctrl.gs(context, input.meta.name)",
                          ng-model-options="{ getterSetter: true }")
                      div(ng-switch-default)
                        strong {{ context.values[input.meta.name] | number:2 }}
                        span &nbsp;{{ input.meta.unit | translate }}
